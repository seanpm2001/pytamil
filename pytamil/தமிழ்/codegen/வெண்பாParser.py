# Generated from /home/srix/workspace/pytamil-all/pytamil-3.10/pytamil/தமிழ்/resources/வெண்பா.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,249,470,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,3,0,117,8,0,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,207,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,4,5,221,8,5,11,5,12,5,222,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,3,8,250,8,8,1,9,1,9,1,9,1,9,3,9,256,8,9,1,
        10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
        14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,296,
        8,22,1,23,1,23,1,23,1,23,3,23,302,8,23,1,24,1,24,3,24,306,8,24,1,
        25,1,25,3,25,310,8,25,1,26,1,26,1,26,1,26,3,26,316,8,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,3,27,334,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
        344,8,28,1,29,1,29,1,29,1,29,3,29,350,8,29,1,30,1,30,1,30,1,31,1,
        31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
        35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,
        40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,
        44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
        48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,4,50,417,8,50,11,50,12,
        50,418,3,50,421,8,50,1,50,1,50,1,50,4,50,426,8,50,11,50,12,50,427,
        3,50,430,8,50,3,50,432,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,4,51,444,8,51,11,51,12,51,445,3,51,448,8,51,1,51,1,
        51,1,51,1,51,4,51,454,8,51,11,51,12,51,455,3,51,458,8,51,3,51,460,
        8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,0,0,56,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,0,3,1,0,2,19,1,0,20,114,1,0,115,247,
        484,0,116,1,0,0,0,2,118,1,0,0,0,4,121,1,0,0,0,6,125,1,0,0,0,8,206,
        1,0,0,0,10,208,1,0,0,0,12,226,1,0,0,0,14,235,1,0,0,0,16,249,1,0,
        0,0,18,255,1,0,0,0,20,257,1,0,0,0,22,260,1,0,0,0,24,263,1,0,0,0,
        26,266,1,0,0,0,28,269,1,0,0,0,30,272,1,0,0,0,32,275,1,0,0,0,34,278,
        1,0,0,0,36,281,1,0,0,0,38,283,1,0,0,0,40,285,1,0,0,0,42,288,1,0,
        0,0,44,295,1,0,0,0,46,301,1,0,0,0,48,305,1,0,0,0,50,309,1,0,0,0,
        52,315,1,0,0,0,54,333,1,0,0,0,56,343,1,0,0,0,58,349,1,0,0,0,60,351,
        1,0,0,0,62,354,1,0,0,0,64,357,1,0,0,0,66,360,1,0,0,0,68,363,1,0,
        0,0,70,366,1,0,0,0,72,369,1,0,0,0,74,372,1,0,0,0,76,375,1,0,0,0,
        78,378,1,0,0,0,80,381,1,0,0,0,82,384,1,0,0,0,84,387,1,0,0,0,86,390,
        1,0,0,0,88,393,1,0,0,0,90,396,1,0,0,0,92,399,1,0,0,0,94,402,1,0,
        0,0,96,405,1,0,0,0,98,408,1,0,0,0,100,431,1,0,0,0,102,459,1,0,0,
        0,104,461,1,0,0,0,106,463,1,0,0,0,108,465,1,0,0,0,110,467,1,0,0,
        0,112,117,3,2,1,0,113,117,3,6,3,0,114,117,3,8,4,0,115,117,3,10,5,
        0,116,112,1,0,0,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,1,0,0,
        0,117,1,1,0,0,0,118,119,3,12,6,0,119,120,3,14,7,0,120,3,1,0,0,0,
        121,122,3,12,6,0,122,123,3,12,6,0,123,124,3,14,7,0,124,5,1,0,0,0,
        125,126,3,12,6,0,126,127,3,12,6,0,127,128,3,12,6,0,128,129,3,14,
        7,0,129,7,1,0,0,0,130,131,3,12,6,0,131,132,3,12,6,0,132,133,3,12,
        6,0,133,134,3,12,6,0,134,135,3,14,7,0,135,207,1,0,0,0,136,137,3,
        12,6,0,137,138,3,12,6,0,138,139,3,12,6,0,139,140,3,12,6,0,140,141,
        3,12,6,0,141,142,3,14,7,0,142,207,1,0,0,0,143,144,3,12,6,0,144,145,
        3,12,6,0,145,146,3,12,6,0,146,147,3,12,6,0,147,148,3,12,6,0,148,
        149,3,12,6,0,149,150,3,14,7,0,150,207,1,0,0,0,151,152,3,12,6,0,152,
        153,3,12,6,0,153,154,3,12,6,0,154,155,3,12,6,0,155,156,3,12,6,0,
        156,157,3,12,6,0,157,158,3,12,6,0,158,159,3,14,7,0,159,207,1,0,0,
        0,160,161,3,12,6,0,161,162,3,12,6,0,162,163,3,12,6,0,163,164,3,12,
        6,0,164,165,3,12,6,0,165,166,3,12,6,0,166,167,3,12,6,0,167,168,3,
        12,6,0,168,169,3,14,7,0,169,207,1,0,0,0,170,171,3,12,6,0,171,172,
        3,12,6,0,172,173,3,12,6,0,173,174,3,12,6,0,174,175,3,12,6,0,175,
        176,3,12,6,0,176,177,3,12,6,0,177,178,3,12,6,0,178,179,3,12,6,0,
        179,180,3,14,7,0,180,207,1,0,0,0,181,182,3,12,6,0,182,183,3,12,6,
        0,183,184,3,12,6,0,184,185,3,12,6,0,185,186,3,12,6,0,186,187,3,12,
        6,0,187,188,3,12,6,0,188,189,3,12,6,0,189,190,3,12,6,0,190,191,3,
        12,6,0,191,192,3,14,7,0,192,207,1,0,0,0,193,194,3,12,6,0,194,195,
        3,12,6,0,195,196,3,12,6,0,196,197,3,12,6,0,197,198,3,12,6,0,198,
        199,3,12,6,0,199,200,3,12,6,0,200,201,3,12,6,0,201,202,3,12,6,0,
        202,203,3,12,6,0,203,204,3,12,6,0,204,205,3,14,7,0,205,207,1,0,0,
        0,206,130,1,0,0,0,206,136,1,0,0,0,206,143,1,0,0,0,206,151,1,0,0,
        0,206,160,1,0,0,0,206,170,1,0,0,0,206,181,1,0,0,0,206,193,1,0,0,
        0,207,9,1,0,0,0,208,209,3,12,6,0,209,210,3,12,6,0,210,211,3,12,6,
        0,211,212,3,12,6,0,212,213,3,12,6,0,213,214,3,12,6,0,214,215,3,12,
        6,0,215,216,3,12,6,0,216,217,3,12,6,0,217,218,3,12,6,0,218,220,3,
        12,6,0,219,221,3,12,6,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,
        1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,3,14,7,0,225,11,
        1,0,0,0,226,227,3,16,8,0,227,228,5,249,0,0,228,229,3,16,8,0,229,
        230,5,249,0,0,230,231,3,16,8,0,231,232,5,249,0,0,232,233,3,16,8,
        0,233,234,5,1,0,0,234,13,1,0,0,0,235,236,3,16,8,0,236,237,5,249,
        0,0,237,238,3,16,8,0,238,239,5,249,0,0,239,240,3,18,9,0,240,15,1,
        0,0,0,241,250,3,20,10,0,242,250,3,22,11,0,243,250,3,24,12,0,244,
        250,3,26,13,0,245,250,3,28,14,0,246,250,3,30,15,0,247,250,3,32,16,
        0,248,250,3,34,17,0,249,241,1,0,0,0,249,242,1,0,0,0,249,243,1,0,
        0,0,249,244,1,0,0,0,249,245,1,0,0,0,249,246,1,0,0,0,249,247,1,0,
        0,0,249,248,1,0,0,0,250,17,1,0,0,0,251,256,3,36,18,0,252,256,3,38,
        19,0,253,256,3,40,20,0,254,256,3,42,21,0,255,251,1,0,0,0,255,252,
        1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,19,1,0,0,0,257,258,3,
        100,50,0,258,259,3,100,50,0,259,21,1,0,0,0,260,261,3,102,51,0,261,
        262,3,100,50,0,262,23,1,0,0,0,263,264,3,102,51,0,264,265,3,102,51,
        0,265,25,1,0,0,0,266,267,3,100,50,0,267,268,3,102,51,0,268,27,1,
        0,0,0,269,270,3,20,10,0,270,271,3,100,50,0,271,29,1,0,0,0,272,273,
        3,22,11,0,273,274,3,100,50,0,274,31,1,0,0,0,275,276,3,24,12,0,276,
        277,3,100,50,0,277,33,1,0,0,0,278,279,3,26,13,0,279,280,3,100,50,
        0,280,35,1,0,0,0,281,282,3,100,50,0,282,37,1,0,0,0,283,284,3,102,
        51,0,284,39,1,0,0,0,285,286,3,100,50,0,286,287,3,100,50,0,287,41,
        1,0,0,0,288,289,3,102,51,0,289,290,3,100,50,0,290,43,1,0,0,0,291,
        296,3,92,46,0,292,296,3,94,47,0,293,296,3,96,48,0,294,296,3,98,49,
        0,295,291,1,0,0,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,
        0,296,45,1,0,0,0,297,302,3,20,10,0,298,302,3,22,11,0,299,302,3,24,
        12,0,300,302,3,26,13,0,301,297,1,0,0,0,301,298,1,0,0,0,301,299,1,
        0,0,0,301,300,1,0,0,0,302,47,1,0,0,0,303,306,3,20,10,0,304,306,3,
        22,11,0,305,303,1,0,0,0,305,304,1,0,0,0,306,49,1,0,0,0,307,310,3,
        24,12,0,308,310,3,26,13,0,309,307,1,0,0,0,309,308,1,0,0,0,310,51,
        1,0,0,0,311,316,3,28,14,0,312,316,3,30,15,0,313,316,3,32,16,0,314,
        316,3,34,17,0,315,311,1,0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,
        314,1,0,0,0,316,53,1,0,0,0,317,334,3,60,30,0,318,334,3,62,31,0,319,
        334,3,64,32,0,320,334,3,66,33,0,321,334,3,68,34,0,322,334,3,70,35,
        0,323,334,3,72,36,0,324,334,3,74,37,0,325,334,3,76,38,0,326,334,
        3,78,39,0,327,334,3,80,40,0,328,334,3,82,41,0,329,334,3,84,42,0,
        330,334,3,86,43,0,331,334,3,88,44,0,332,334,3,90,45,0,333,317,1,
        0,0,0,333,318,1,0,0,0,333,319,1,0,0,0,333,320,1,0,0,0,333,321,1,
        0,0,0,333,322,1,0,0,0,333,323,1,0,0,0,333,324,1,0,0,0,333,325,1,
        0,0,0,333,326,1,0,0,0,333,327,1,0,0,0,333,328,1,0,0,0,333,329,1,
        0,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,55,1,0,
        0,0,335,344,3,28,14,0,336,344,3,92,46,0,337,344,3,30,15,0,338,344,
        3,94,47,0,339,344,3,32,16,0,340,344,3,96,48,0,341,344,3,34,17,0,
        342,344,3,98,49,0,343,335,1,0,0,0,343,336,1,0,0,0,343,337,1,0,0,
        0,343,338,1,0,0,0,343,339,1,0,0,0,343,340,1,0,0,0,343,341,1,0,0,
        0,343,342,1,0,0,0,344,57,1,0,0,0,345,350,3,20,10,0,346,350,3,22,
        11,0,347,350,3,24,12,0,348,350,3,26,13,0,349,345,1,0,0,0,349,346,
        1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,350,59,1,0,0,0,351,352,3,
        28,14,0,352,353,3,100,50,0,353,61,1,0,0,0,354,355,3,28,14,0,355,
        356,3,102,51,0,356,63,1,0,0,0,357,358,3,92,46,0,358,359,3,100,50,
        0,359,65,1,0,0,0,360,361,3,92,46,0,361,362,3,102,51,0,362,67,1,0,
        0,0,363,364,3,30,15,0,364,365,3,100,50,0,365,69,1,0,0,0,366,367,
        3,30,15,0,367,368,3,102,51,0,368,71,1,0,0,0,369,370,3,94,47,0,370,
        371,3,100,50,0,371,73,1,0,0,0,372,373,3,94,47,0,373,374,3,102,51,
        0,374,75,1,0,0,0,375,376,3,32,16,0,376,377,3,100,50,0,377,77,1,0,
        0,0,378,379,3,32,16,0,379,380,3,102,51,0,380,79,1,0,0,0,381,382,
        3,96,48,0,382,383,3,100,50,0,383,81,1,0,0,0,384,385,3,96,48,0,385,
        386,3,102,51,0,386,83,1,0,0,0,387,388,3,34,17,0,388,389,3,100,50,
        0,389,85,1,0,0,0,390,391,3,34,17,0,391,392,3,102,51,0,392,87,1,0,
        0,0,393,394,3,98,49,0,394,395,3,100,50,0,395,89,1,0,0,0,396,397,
        3,98,49,0,397,398,3,102,51,0,398,91,1,0,0,0,399,400,3,20,10,0,400,
        401,3,102,51,0,401,93,1,0,0,0,402,403,3,22,11,0,403,404,3,102,51,
        0,404,95,1,0,0,0,405,406,3,24,12,0,406,407,3,102,51,0,407,97,1,0,
        0,0,408,409,3,26,13,0,409,410,3,102,51,0,410,99,1,0,0,0,411,432,
        3,106,53,0,412,432,3,108,54,0,413,420,3,106,53,0,414,421,3,110,55,
        0,415,417,3,104,52,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,
        0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,414,1,0,0,0,420,416,1,0,
        0,0,421,432,1,0,0,0,422,429,3,108,54,0,423,430,3,110,55,0,424,426,
        3,104,52,0,425,424,1,0,0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,428,
        1,0,0,0,428,430,1,0,0,0,429,423,1,0,0,0,429,425,1,0,0,0,430,432,
        1,0,0,0,431,411,1,0,0,0,431,412,1,0,0,0,431,413,1,0,0,0,431,422,
        1,0,0,0,432,101,1,0,0,0,433,434,3,106,53,0,434,435,3,106,53,0,435,
        460,1,0,0,0,436,437,3,106,53,0,437,438,3,108,54,0,438,460,1,0,0,
        0,439,440,3,106,53,0,440,447,3,106,53,0,441,448,3,110,55,0,442,444,
        3,104,52,0,443,442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,
        1,0,0,0,446,448,1,0,0,0,447,441,1,0,0,0,447,443,1,0,0,0,448,460,
        1,0,0,0,449,450,3,106,53,0,450,457,3,108,54,0,451,458,3,110,55,0,
        452,454,3,104,52,0,453,452,1,0,0,0,454,455,1,0,0,0,455,453,1,0,0,
        0,455,456,1,0,0,0,456,458,1,0,0,0,457,451,1,0,0,0,457,453,1,0,0,
        0,458,460,1,0,0,0,459,433,1,0,0,0,459,436,1,0,0,0,459,439,1,0,0,
        0,459,449,1,0,0,0,460,103,1,0,0,0,461,462,7,0,0,0,462,105,1,0,0,
        0,463,464,7,1,0,0,464,107,1,0,0,0,465,466,7,2,0,0,466,109,1,0,0,
        0,467,468,5,248,0,0,468,111,1,0,0,0,23,116,206,222,249,255,295,301,
        305,309,315,333,343,349,418,420,427,429,431,445,447,455,457,459
    ]

class வெண்பாParser ( Parser ):

    grammarFileName = "வெண்பா.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\n'", "'\\u0B95\\u0BCD'", "'\\u0B9A\\u0BCD'", 
                     "'\\u0B9F\\u0BCD'", "'\\u0BA4\\u0BCD'", "'\\u0BAA\\u0BCD'", 
                     "'\\u0BB1\\u0BCD'", "'\\u0B9E\\u0BCD'", "'\\u0B99\\u0BCD'", 
                     "'\\u0BA3\\u0BCD'", "'\\u0BA8\\u0BCD'", "'\\u0BAE\\u0BCD'", 
                     "'\\u0BA9\\u0BCD'", "'\\u0BAF\\u0BCD'", "'\\u0BB0\\u0BCD'", 
                     "'\\u0BB2\\u0BCD'", "'\\u0BB5\\u0BCD'", "'\\u0BB4\\u0BCD'", 
                     "'\\u0BB3\\u0BCD'", "'\\u0B85'", "'\\u0B87'", "'\\u0B89'", 
                     "'\\u0B8E'", "'\\u0B92'", "'\\u0B95'", "'\\u0B95\\u0BBF'", 
                     "'\\u0B95\\u0BC1'", "'\\u0B95\\u0BC6'", "'\\u0B95\\u0BCA'", 
                     "'\\u0B99'", "'\\u0B99\\u0BBF'", "'\\u0B99\\u0BC1'", 
                     "'\\u0B99\\u0BC6'", "'\\u0B99\\u0BCA'", "'\\u0B9A'", 
                     "'\\u0B9A\\u0BBF'", "'\\u0B9A\\u0BC1'", "'\\u0B9A\\u0BC6'", 
                     "'\\u0B9A\\u0BCA'", "'\\u0B9E'", "'\\u0B9E\\u0BBF'", 
                     "'\\u0B9E\\u0BC1'", "'\\u0B9E\\u0BC6'", "'\\u0B9E\\u0BCA'", 
                     "'\\u0B9F'", "'\\u0B9F\\u0BBF'", "'\\u0B9F\\u0BC1'", 
                     "'\\u0B9F\\u0BC6'", "'\\u0B9F\\u0BCA'", "'\\u0BA3'", 
                     "'\\u0BA3\\u0BBF'", "'\\u0BA3\\u0BC1'", "'\\u0BA3\\u0BC6'", 
                     "'\\u0BA3\\u0BCA'", "'\\u0BA4'", "'\\u0BA4\\u0BBF'", 
                     "'\\u0BA4\\u0BC1'", "'\\u0BA4\\u0BC6'", "'\\u0BA4\\u0BCA'", 
                     "'\\u0BA8'", "'\\u0BA8\\u0BBF'", "'\\u0BA8\\u0BC1'", 
                     "'\\u0BA8\\u0BC6'", "'\\u0BA8\\u0BCA'", "'\\u0BAA'", 
                     "'\\u0BAA\\u0BBF'", "'\\u0BAA\\u0BC1'", "'\\u0BAA\\u0BC6'", 
                     "'\\u0BAA\\u0BCA'", "'\\u0BAE'", "'\\u0BAE\\u0BBF'", 
                     "'\\u0BAE\\u0BC1'", "'\\u0BAE\\u0BC6'", "'\\u0BAE\\u0BCA'", 
                     "'\\u0BAF'", "'\\u0BAF\\u0BBF'", "'\\u0BAF\\u0BC1'", 
                     "'\\u0BAF\\u0BC6'", "'\\u0BAF\\u0BCA'", "'\\u0BB0'", 
                     "'\\u0BB0\\u0BBF'", "'\\u0BB0\\u0BC1'", "'\\u0BB0\\u0BC6'", 
                     "'\\u0BB0\\u0BCA'", "'\\u0BB2'", "'\\u0BB2\\u0BBF'", 
                     "'\\u0BB2\\u0BC1'", "'\\u0BB2\\u0BC6'", "'\\u0BB2\\u0BCA'", 
                     "'\\u0BB5'", "'\\u0BB5\\u0BBF'", "'\\u0BB5\\u0BC1'", 
                     "'\\u0BB5\\u0BC6'", "'\\u0BB5\\u0BCA'", "'\\u0BB4'", 
                     "'\\u0BB4\\u0BBF'", "'\\u0BB4\\u0BC1'", "'\\u0BB4\\u0BC6'", 
                     "'\\u0BB4\\u0BCA'", "'\\u0BB3'", "'\\u0BB3\\u0BBF'", 
                     "'\\u0BB3\\u0BC1'", "'\\u0BB3\\u0BC6'", "'\\u0BB3\\u0BCA'", 
                     "'\\u0BB1'", "'\\u0BB1\\u0BBF'", "'\\u0BB1\\u0BC1'", 
                     "'\\u0BB1\\u0BC6'", "'\\u0BB1\\u0BCA'", "'\\u0BA9'", 
                     "'\\u0BA9\\u0BBF'", "'\\u0BA9\\u0BC1'", "'\\u0BA9\\u0BC6'", 
                     "'\\u0BA9\\u0BCA'", "'\\u0B86'", "'\\u0B88'", "'\\u0B8A'", 
                     "'\\u0B8F'", "'\\u0B90'", "'\\u0B93'", "'\\u0B92\\u0BB3'", 
                     "'\\u0B95\\u0BBE'", "'\\u0B95\\u0BC0'", "'\\u0B95\\u0BC2'", 
                     "'\\u0B95\\u0BC7'", "'\\u0B95\\u0BC8'", "'\\u0B95\\u0BCB'", 
                     "'\\u0B95\\u0BCC'", "'\\u0B99\\u0BBE'", "'\\u0B99\\u0BC0'", 
                     "'\\u0B99\\u0BC2'", "'\\u0B99\\u0BC7'", "'\\u0B99\\u0BC8'", 
                     "'\\u0B99\\u0BCB'", "'\\u0B99\\u0BCC'", "'\\u0B9A\\u0BBE'", 
                     "'\\u0B9A\\u0BC0'", "'\\u0B9A\\u0BC2'", "'\\u0B9A\\u0BC7'", 
                     "'\\u0B9A\\u0BC8'", "'\\u0B9A\\u0BCB'", "'\\u0B9A\\u0BCC'", 
                     "'\\u0B9E\\u0BBE'", "'\\u0B9E\\u0BC0'", "'\\u0B9E\\u0BC2'", 
                     "'\\u0B9E\\u0BC7'", "'\\u0B9E\\u0BC8'", "'\\u0B9E\\u0BCB'", 
                     "'\\u0B9E\\u0BCC'", "'\\u0B9F\\u0BBE'", "'\\u0B9F\\u0BC0'", 
                     "'\\u0B9F\\u0BC2'", "'\\u0B9F\\u0BC7'", "'\\u0B9F\\u0BC8'", 
                     "'\\u0B9F\\u0BCB'", "'\\u0B9F\\u0BCC'", "'\\u0BA3\\u0BBE'", 
                     "'\\u0BA3\\u0BC0'", "'\\u0BA3\\u0BC2'", "'\\u0BA3\\u0BC7'", 
                     "'\\u0BA3\\u0BC8'", "'\\u0BA3\\u0BCB'", "'\\u0BA3\\u0BCC'", 
                     "'\\u0BA4\\u0BBE'", "'\\u0BA4\\u0BC0'", "'\\u0BA4\\u0BC2'", 
                     "'\\u0BA4\\u0BC7'", "'\\u0BA4\\u0BC8'", "'\\u0BA4\\u0BCB'", 
                     "'\\u0BA4\\u0BCC'", "'\\u0BA8\\u0BBE'", "'\\u0BA8\\u0BC0'", 
                     "'\\u0BA8\\u0BC2'", "'\\u0BA8\\u0BC7'", "'\\u0BA8\\u0BC8'", 
                     "'\\u0BA8\\u0BCB'", "'\\u0BA8\\u0BCC'", "'\\u0BAA\\u0BBE'", 
                     "'\\u0BAA\\u0BC0'", "'\\u0BAA\\u0BC2'", "'\\u0BAA\\u0BC7'", 
                     "'\\u0BAA\\u0BC8'", "'\\u0BAA\\u0BCB'", "'\\u0BAA\\u0BCC'", 
                     "'\\u0BAE\\u0BBE'", "'\\u0BAE\\u0BC0'", "'\\u0BAE\\u0BC2'", 
                     "'\\u0BAE\\u0BC7'", "'\\u0BAE\\u0BC8'", "'\\u0BAE\\u0BCB'", 
                     "'\\u0BAE\\u0BCC'", "'\\u0BAF\\u0BBE'", "'\\u0BAF\\u0BC0'", 
                     "'\\u0BAF\\u0BC2'", "'\\u0BAF\\u0BC7'", "'\\u0BAF\\u0BC8'", 
                     "'\\u0BAF\\u0BCB'", "'\\u0BAF\\u0BCC'", "'\\u0BB0\\u0BBE'", 
                     "'\\u0BB0\\u0BC0'", "'\\u0BB0\\u0BC2'", "'\\u0BB0\\u0BC7'", 
                     "'\\u0BB0\\u0BC8'", "'\\u0BB0\\u0BCB'", "'\\u0BB0\\u0BCC'", 
                     "'\\u0BB2\\u0BBE'", "'\\u0BB2\\u0BC0'", "'\\u0BB2\\u0BC2'", 
                     "'\\u0BB2\\u0BC7'", "'\\u0BB2\\u0BC8'", "'\\u0BB2\\u0BCB'", 
                     "'\\u0BB2\\u0BCC'", "'\\u0BB5\\u0BBE'", "'\\u0BB5\\u0BC0'", 
                     "'\\u0BB5\\u0BC2'", "'\\u0BB5\\u0BC7'", "'\\u0BB5\\u0BC8'", 
                     "'\\u0BB5\\u0BCB'", "'\\u0BB5\\u0BCC'", "'\\u0BB4\\u0BBE'", 
                     "'\\u0BB4\\u0BC0'", "'\\u0BB4\\u0BC2'", "'\\u0BB4\\u0BC7'", 
                     "'\\u0BB4\\u0BC8'", "'\\u0BB4\\u0BCB'", "'\\u0BB4\\u0BCC'", 
                     "'\\u0BB3\\u0BBE'", "'\\u0BB3\\u0BC0'", "'\\u0BB3\\u0BC2'", 
                     "'\\u0BB3\\u0BC7'", "'\\u0BB3\\u0BC8'", "'\\u0BB3\\u0BCB'", 
                     "'\\u0BB3\\u0BCC'", "'\\u0BB1\\u0BBE'", "'\\u0BB1\\u0BC0'", 
                     "'\\u0BB1\\u0BC2'", "'\\u0BB1\\u0BC7'", "'\\u0BB1\\u0BC8'", 
                     "'\\u0BB1\\u0BCB'", "'\\u0BB1\\u0BCC'", "'\\u0BA9\\u0BBE'", 
                     "'\\u0BA9\\u0BC0'", "'\\u0BA9\\u0BC2'", "'\\u0BA9\\u0BC7'", 
                     "'\\u0BA9\\u0BC8'", "'\\u0BA9\\u0BCB'", "'\\u0BA9\\u0BCC'", 
                     "'\\u0B83'", "' '" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "I" ]

    RULE_வெண்பா = 0
    RULE_குறள்_வெண்பா = 1
    RULE_சிந்தியல்_வெண்பா = 2
    RULE_நேரிசை_வெண்பா = 3
    RULE_பஃறொடை_வெண்பா = 4
    RULE_கலி_வெண்பா = 5
    RULE_அடி = 6
    RULE_ஈற்றடி = 7
    RULE_சீர் = 8
    RULE_ஈற்றுச்சீர் = 9
    RULE_தேமா = 10
    RULE_புளிமா = 11
    RULE_கருவிளம் = 12
    RULE_கூவிளம் = 13
    RULE_தேமாங்காய் = 14
    RULE_புளிமாங்காய் = 15
    RULE_கருவிளங்காய் = 16
    RULE_கூவிளங்காய் = 17
    RULE_நாள் = 18
    RULE_மலர் = 19
    RULE_காசு = 20
    RULE_பிறப்பு = 21
    RULE_வஞ்சிச்_சீர் = 22
    RULE_இயற்சீர் = 23
    RULE_மாச்சீர் = 24
    RULE_விளச்சீர் = 25
    RULE_வெண்சீர் = 26
    RULE_நாலசை = 27
    RULE_மூவசை = 28
    RULE_ஈரசை = 29
    RULE_தேமாந்தண்பூ = 30
    RULE_தேமாந்தண்ணிழல் = 31
    RULE_தேமாநறும்பூ = 32
    RULE_தேமாநறுநிழல் = 33
    RULE_புளிமாந்தண்பூ = 34
    RULE_புளிமாந்தண்ணிழல் = 35
    RULE_புளிமாநறும்பூ = 36
    RULE_புளிமாநறுநிழல் = 37
    RULE_கருவிளந்தண்பூ = 38
    RULE_கருவிளந்தண்ணிழல் = 39
    RULE_கருவிளநறும்பூ = 40
    RULE_கருவிளநறுநிழல் = 41
    RULE_கூவிளந்தண்பூ = 42
    RULE_கூவிளந்தண்ணிழல் = 43
    RULE_கூவிளநறும்பூ = 44
    RULE_கூவிளநறுநிழல் = 45
    RULE_தேமாங்கனி = 46
    RULE_புளிமாங்கனி = 47
    RULE_கருவிளங்கனி = 48
    RULE_கூவிளங்கனி = 49
    RULE_நேர் = 50
    RULE_நிரை = 51
    RULE_ஒற்று = 52
    RULE_குறில் = 53
    RULE_நெடில் = 54
    RULE_ஆய்தம் = 55

    ruleNames =  [ "வெண்பா", "குறள்_வெண்பா", "சிந்தியல்_வெண்பா", "நேரிசை_வெண்பா", 
                   "பஃறொடை_வெண்பா", "கலி_வெண்பா", "அடி", "ஈற்றடி", "சீர்", 
                   "ஈற்றுச்சீர்", "தேமா", "புளிமா", "கருவிளம்", "கூவிளம்", 
                   "தேமாங்காய்", "புளிமாங்காய்", "கருவிளங்காய்", "கூவிளங்காய்", 
                   "நாள்", "மலர்", "காசு", "பிறப்பு", "வஞ்சிச்_சீர்", "இயற்சீர்", 
                   "மாச்சீர்", "விளச்சீர்", "வெண்சீர்", "நாலசை", "மூவசை", 
                   "ஈரசை", "தேமாந்தண்பூ", "தேமாந்தண்ணிழல்", "தேமாநறும்பூ", 
                   "தேமாநறுநிழல்", "புளிமாந்தண்பூ", "புளிமாந்தண்ணிழல்", 
                   "புளிமாநறும்பூ", "புளிமாநறுநிழல்", "கருவிளந்தண்பூ", "கருவிளந்தண்ணிழல்", 
                   "கருவிளநறும்பூ", "கருவிளநறுநிழல்", "கூவிளந்தண்பூ", "கூவிளந்தண்ணிழல்", 
                   "கூவிளநறும்பூ", "கூவிளநறுநிழல்", "தேமாங்கனி", "புளிமாங்கனி", 
                   "கருவிளங்கனி", "கூவிளங்கனி", "நேர்", "நிரை", "ஒற்று", 
                   "குறில்", "நெடில்", "ஆய்தம்" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    T__225=226
    T__226=227
    T__227=228
    T__228=229
    T__229=230
    T__230=231
    T__231=232
    T__232=233
    T__233=234
    T__234=235
    T__235=236
    T__236=237
    T__237=238
    T__238=239
    T__239=240
    T__240=241
    T__241=242
    T__242=243
    T__243=244
    T__244=245
    T__245=246
    T__246=247
    T__247=248
    I=249

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def குறள்_வெண்பா(self):
            return self.getTypedRuleContext(வெண்பாParser.குறள்_வெண்பாContext,0)


        def நேரிசை_வெண்பா(self):
            return self.getTypedRuleContext(வெண்பாParser.நேரிசை_வெண்பாContext,0)


        def பஃறொடை_வெண்பா(self):
            return self.getTypedRuleContext(வெண்பாParser.பஃறொடை_வெண்பாContext,0)


        def கலி_வெண்பா(self):
            return self.getTypedRuleContext(வெண்பாParser.கலி_வெண்பாContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterவெண்பா" ):
                listener.enterவெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitவெண்பா" ):
                listener.exitவெண்பா(self)




    def வெண்பா(self):

        localctx = வெண்பாParser.வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_வெண்பா)
        try:
            self.state = 116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 112
                self.குறள்_வெண்பா()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.நேரிசை_வெண்பா()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 114
                self.பஃறொடை_வெண்பா()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 115
                self.கலி_வெண்பா()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class குறள்_வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def அடி(self):
            return self.getTypedRuleContext(வெண்பாParser.அடிContext,0)


        def ஈற்றடி(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றடிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_குறள்_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகுறள்_வெண்பா" ):
                listener.enterகுறள்_வெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகுறள்_வெண்பா" ):
                listener.exitகுறள்_வெண்பா(self)




    def குறள்_வெண்பா(self):

        localctx = வெண்பாParser.குறள்_வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_குறள்_வெண்பா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 118
            self.அடி()
            self.state = 119
            self.ஈற்றடி()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class சிந்தியல்_வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def அடி(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.அடிContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.அடிContext,i)


        def ஈற்றடி(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றடிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_சிந்தியல்_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterசிந்தியல்_வெண்பா" ):
                listener.enterசிந்தியல்_வெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitசிந்தியல்_வெண்பா" ):
                listener.exitசிந்தியல்_வெண்பா(self)




    def சிந்தியல்_வெண்பா(self):

        localctx = வெண்பாParser.சிந்தியல்_வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_சிந்தியல்_வெண்பா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self.அடி()
            self.state = 122
            self.அடி()
            self.state = 123
            self.ஈற்றடி()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நேரிசை_வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def அடி(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.அடிContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.அடிContext,i)


        def ஈற்றடி(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றடிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நேரிசை_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநேரிசை_வெண்பா" ):
                listener.enterநேரிசை_வெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநேரிசை_வெண்பா" ):
                listener.exitநேரிசை_வெண்பா(self)




    def நேரிசை_வெண்பா(self):

        localctx = வெண்பாParser.நேரிசை_வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_நேரிசை_வெண்பா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self.அடி()
            self.state = 126
            self.அடி()
            self.state = 127
            self.அடி()
            self.state = 128
            self.ஈற்றடி()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class பஃறொடை_வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def அடி(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.அடிContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.அடிContext,i)


        def ஈற்றடி(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றடிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_பஃறொடை_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபஃறொடை_வெண்பா" ):
                listener.enterபஃறொடை_வெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபஃறொடை_வெண்பா" ):
                listener.exitபஃறொடை_வெண்பா(self)




    def பஃறொடை_வெண்பா(self):

        localctx = வெண்பாParser.பஃறொடை_வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_பஃறொடை_வெண்பா)
        try:
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.அடி()
                self.state = 131
                self.அடி()
                self.state = 132
                self.அடி()
                self.state = 133
                self.அடி()
                self.state = 134
                self.ஈற்றடி()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 136
                self.அடி()
                self.state = 137
                self.அடி()
                self.state = 138
                self.அடி()
                self.state = 139
                self.அடி()
                self.state = 140
                self.அடி()
                self.state = 141
                self.ஈற்றடி()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 143
                self.அடி()
                self.state = 144
                self.அடி()
                self.state = 145
                self.அடி()
                self.state = 146
                self.அடி()
                self.state = 147
                self.அடி()
                self.state = 148
                self.அடி()
                self.state = 149
                self.ஈற்றடி()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.அடி()
                self.state = 152
                self.அடி()
                self.state = 153
                self.அடி()
                self.state = 154
                self.அடி()
                self.state = 155
                self.அடி()
                self.state = 156
                self.அடி()
                self.state = 157
                self.அடி()
                self.state = 158
                self.ஈற்றடி()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 160
                self.அடி()
                self.state = 161
                self.அடி()
                self.state = 162
                self.அடி()
                self.state = 163
                self.அடி()
                self.state = 164
                self.அடி()
                self.state = 165
                self.அடி()
                self.state = 166
                self.அடி()
                self.state = 167
                self.அடி()
                self.state = 168
                self.ஈற்றடி()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 170
                self.அடி()
                self.state = 171
                self.அடி()
                self.state = 172
                self.அடி()
                self.state = 173
                self.அடி()
                self.state = 174
                self.அடி()
                self.state = 175
                self.அடி()
                self.state = 176
                self.அடி()
                self.state = 177
                self.அடி()
                self.state = 178
                self.அடி()
                self.state = 179
                self.ஈற்றடி()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 181
                self.அடி()
                self.state = 182
                self.அடி()
                self.state = 183
                self.அடி()
                self.state = 184
                self.அடி()
                self.state = 185
                self.அடி()
                self.state = 186
                self.அடி()
                self.state = 187
                self.அடி()
                self.state = 188
                self.அடி()
                self.state = 189
                self.அடி()
                self.state = 190
                self.அடி()
                self.state = 191
                self.ஈற்றடி()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 193
                self.அடி()
                self.state = 194
                self.அடி()
                self.state = 195
                self.அடி()
                self.state = 196
                self.அடி()
                self.state = 197
                self.அடி()
                self.state = 198
                self.அடி()
                self.state = 199
                self.அடி()
                self.state = 200
                self.அடி()
                self.state = 201
                self.அடி()
                self.state = 202
                self.அடி()
                self.state = 203
                self.அடி()
                self.state = 204
                self.ஈற்றடி()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கலி_வெண்பாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def அடி(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.அடிContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.அடிContext,i)


        def ஈற்றடி(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றடிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கலி_வெண்பா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகலி_வெண்பா" ):
                listener.enterகலி_வெண்பா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகலி_வெண்பா" ):
                listener.exitகலி_வெண்பா(self)




    def கலி_வெண்பா(self):

        localctx = வெண்பாParser.கலி_வெண்பாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_கலி_வெண்பா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.அடி()
            self.state = 209
            self.அடி()
            self.state = 210
            self.அடி()
            self.state = 211
            self.அடி()
            self.state = 212
            self.அடி()
            self.state = 213
            self.அடி()
            self.state = 214
            self.அடி()
            self.state = 215
            self.அடி()
            self.state = 216
            self.அடி()
            self.state = 217
            self.அடி()
            self.state = 218
            self.அடி()
            self.state = 220 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 219
                    self.அடி()

                else:
                    raise NoViableAltException(self)
                self.state = 222 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 224
            self.ஈற்றடி()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class அடிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def சீர்(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.சீர்Context)
            else:
                return self.getTypedRuleContext(வெண்பாParser.சீர்Context,i)


        def I(self, i:int=None):
            if i is None:
                return self.getTokens(வெண்பாParser.I)
            else:
                return self.getToken(வெண்பாParser.I, i)

        def getRuleIndex(self):
            return வெண்பாParser.RULE_அடி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஅடி" ):
                listener.enterஅடி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஅடி" ):
                listener.exitஅடி(self)




    def அடி(self):

        localctx = வெண்பாParser.அடிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_அடி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.சீர்()
            self.state = 227
            self.match(வெண்பாParser.I)
            self.state = 228
            self.சீர்()
            self.state = 229
            self.match(வெண்பாParser.I)
            self.state = 230
            self.சீர்()
            self.state = 231
            self.match(வெண்பாParser.I)
            self.state = 232
            self.சீர்()
            self.state = 233
            self.match(வெண்பாParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ஈற்றடிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def சீர்(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.சீர்Context)
            else:
                return self.getTypedRuleContext(வெண்பாParser.சீர்Context,i)


        def I(self, i:int=None):
            if i is None:
                return self.getTokens(வெண்பாParser.I)
            else:
                return self.getToken(வெண்பாParser.I, i)

        def ஈற்றுச்சீர்(self):
            return self.getTypedRuleContext(வெண்பாParser.ஈற்றுச்சீர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_ஈற்றடி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஈற்றடி" ):
                listener.enterஈற்றடி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஈற்றடி" ):
                listener.exitஈற்றடி(self)




    def ஈற்றடி(self):

        localctx = வெண்பாParser.ஈற்றடிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_ஈற்றடி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.சீர்()
            self.state = 236
            self.match(வெண்பாParser.I)
            self.state = 237
            self.சீர்()
            self.state = 238
            self.match(வெண்பாParser.I)
            self.state = 239
            self.ஈற்றுச்சீர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def தேமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்காய்Context,0)


        def புளிமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்காய்Context,0)


        def கருவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்காய்Context,0)


        def கூவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்காய்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterசீர்" ):
                listener.enterசீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitசீர்" ):
                listener.exitசீர்(self)




    def சீர்(self):

        localctx = வெண்பாParser.சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_சீர்)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.தேமா()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 242
                self.புளிமா()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 243
                self.கருவிளம்()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 244
                self.கூவிளம்()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 245
                self.தேமாங்காய்()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 246
                self.புளிமாங்காய்()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 247
                self.கருவிளங்காய்()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 248
                self.கூவிளங்காய்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ஈற்றுச்சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நாள்(self):
            return self.getTypedRuleContext(வெண்பாParser.நாள்Context,0)


        def மலர்(self):
            return self.getTypedRuleContext(வெண்பாParser.மலர்Context,0)


        def காசு(self):
            return self.getTypedRuleContext(வெண்பாParser.காசுContext,0)


        def பிறப்பு(self):
            return self.getTypedRuleContext(வெண்பாParser.பிறப்புContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_ஈற்றுச்சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஈற்றுச்சீர்" ):
                listener.enterஈற்றுச்சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஈற்றுச்சீர்" ):
                listener.exitஈற்றுச்சீர்(self)




    def ஈற்றுச்சீர்(self):

        localctx = வெண்பாParser.ஈற்றுச்சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ஈற்றுச்சீர்)
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.நாள்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.மலர்()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 253
                self.காசு()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 254
                self.பிறப்பு()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நேர்(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.நேர்Context)
            else:
                return self.getTypedRuleContext(வெண்பாParser.நேர்Context,i)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமா" ):
                listener.enterதேமா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமா" ):
                listener.exitதேமா(self)




    def தேமா(self):

        localctx = வெண்பாParser.தேமாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_தேமா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.நேர்()
            self.state = 258
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமா

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமா" ):
                listener.enterபுளிமா(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமா" ):
                listener.exitபுளிமா(self)




    def புளிமா(self):

        localctx = வெண்பாParser.புளிமாContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_புளிமா)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.நிரை()
            self.state = 261
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளம்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நிரை(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.நிரைContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.நிரைContext,i)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளம்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளம்" ):
                listener.enterகருவிளம்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளம்" ):
                listener.exitகருவிளம்(self)




    def கருவிளம்(self):

        localctx = வெண்பாParser.கருவிளம்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_கருவிளம்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.நிரை()
            self.state = 264
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளம்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளம்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளம்" ):
                listener.enterகூவிளம்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளம்" ):
                listener.exitகூவிளம்(self)




    def கூவிளம்(self):

        localctx = வெண்பாParser.கூவிளம்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_கூவிளம்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.நேர்()
            self.state = 267
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாங்காய்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாங்காய்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாங்காய்" ):
                listener.enterதேமாங்காய்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாங்காய்" ):
                listener.exitதேமாங்காய்(self)




    def தேமாங்காய்(self):

        localctx = வெண்பாParser.தேமாங்காய்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_தேமாங்காய்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.தேமா()
            self.state = 270
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாங்காய்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாங்காய்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாங்காய்" ):
                listener.enterபுளிமாங்காய்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாங்காய்" ):
                listener.exitபுளிமாங்காய்(self)




    def புளிமாங்காய்(self):

        localctx = வெண்பாParser.புளிமாங்காய்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_புளிமாங்காய்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.புளிமா()
            self.state = 273
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளங்காய்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளங்காய்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளங்காய்" ):
                listener.enterகருவிளங்காய்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளங்காய்" ):
                listener.exitகருவிளங்காய்(self)




    def கருவிளங்காய்(self):

        localctx = வெண்பாParser.கருவிளங்காய்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_கருவிளங்காய்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.கருவிளம்()
            self.state = 276
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளங்காய்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளங்காய்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளங்காய்" ):
                listener.enterகூவிளங்காய்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளங்காய்" ):
                listener.exitகூவிளங்காய்(self)




    def கூவிளங்காய்(self):

        localctx = வெண்பாParser.கூவிளங்காய்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_கூவிளங்காய்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.கூவிளம்()
            self.state = 279
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நாள்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நாள்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநாள்" ):
                listener.enterநாள்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநாள்" ):
                listener.exitநாள்(self)




    def நாள்(self):

        localctx = வெண்பாParser.நாள்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_நாள்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class மலர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_மலர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterமலர்" ):
                listener.enterமலர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitமலர்" ):
                listener.exitமலர்(self)




    def மலர்(self):

        localctx = வெண்பாParser.மலர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_மலர்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class காசுContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நேர்(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.நேர்Context)
            else:
                return self.getTypedRuleContext(வெண்பாParser.நேர்Context,i)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_காசு

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகாசு" ):
                listener.enterகாசு(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகாசு" ):
                listener.exitகாசு(self)




    def காசு(self):

        localctx = வெண்பாParser.காசுContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_காசு)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.நேர்()
            self.state = 286
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class பிறப்புContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_பிறப்பு

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபிறப்பு" ):
                listener.enterபிறப்பு(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபிறப்பு" ):
                listener.exitபிறப்பு(self)




    def பிறப்பு(self):

        localctx = வெண்பாParser.பிறப்புContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_பிறப்பு)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.நிரை()
            self.state = 289
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class வஞ்சிச்_சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்கனிContext,0)


        def புளிமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்கனிContext,0)


        def கருவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்கனிContext,0)


        def கூவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்கனிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_வஞ்சிச்_சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterவஞ்சிச்_சீர்" ):
                listener.enterவஞ்சிச்_சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitவஞ்சிச்_சீர்" ):
                listener.exitவஞ்சிச்_சீர்(self)




    def வஞ்சிச்_சீர்(self):

        localctx = வெண்பாParser.வஞ்சிச்_சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_வஞ்சிச்_சீர்)
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.தேமாங்கனி()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.புளிமாங்கனி()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.கருவிளங்கனி()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 294
                self.கூவிளங்கனி()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class இயற்சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_இயற்சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஇயற்சீர்" ):
                listener.enterஇயற்சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஇயற்சீர்" ):
                listener.exitஇயற்சீர்(self)




    def இயற்சீர்(self):

        localctx = வெண்பாParser.இயற்சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_இயற்சீர்)
        try:
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.தேமா()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.புளிமா()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 299
                self.கருவிளம்()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 300
                self.கூவிளம்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class மாச்சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_மாச்சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterமாச்சீர்" ):
                listener.enterமாச்சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitமாச்சீர்" ):
                listener.exitமாச்சீர்(self)




    def மாச்சீர்(self):

        localctx = வெண்பாParser.மாச்சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_மாச்சீர்)
        try:
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.தேமா()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.புளிமா()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class விளச்சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_விளச்சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterவிளச்சீர்" ):
                listener.enterவிளச்சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitவிளச்சீர்" ):
                listener.exitவிளச்சீர்(self)




    def விளச்சீர்(self):

        localctx = வெண்பாParser.விளச்சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_விளச்சீர்)
        try:
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                self.கருவிளம்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.கூவிளம்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class வெண்சீர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்காய்Context,0)


        def புளிமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்காய்Context,0)


        def கருவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்காய்Context,0)


        def கூவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்காய்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_வெண்சீர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterவெண்சீர்" ):
                listener.enterவெண்சீர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitவெண்சீர்" ):
                listener.exitவெண்சீர்(self)




    def வெண்சீர்(self):

        localctx = வெண்பாParser.வெண்சீர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_வெண்சீர்)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.தேமாங்காய்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.புளிமாங்காய்()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 313
                self.கருவிளங்காய்()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 314
                self.கூவிளங்காய்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நாலசைContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாந்தண்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாந்தண்பூContext,0)


        def தேமாந்தண்ணிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாந்தண்ணிழல்Context,0)


        def தேமாநறும்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாநறும்பூContext,0)


        def தேமாநறுநிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாநறுநிழல்Context,0)


        def புளிமாந்தண்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாந்தண்பூContext,0)


        def புளிமாந்தண்ணிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாந்தண்ணிழல்Context,0)


        def புளிமாநறும்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாநறும்பூContext,0)


        def புளிமாநறுநிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாநறுநிழல்Context,0)


        def கருவிளந்தண்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளந்தண்பூContext,0)


        def கருவிளந்தண்ணிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளந்தண்ணிழல்Context,0)


        def கருவிளநறும்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளநறும்பூContext,0)


        def கருவிளநறுநிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளநறுநிழல்Context,0)


        def கூவிளந்தண்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளந்தண்பூContext,0)


        def கூவிளந்தண்ணிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளந்தண்ணிழல்Context,0)


        def கூவிளநறும்பூ(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளநறும்பூContext,0)


        def கூவிளநறுநிழல்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளநறுநிழல்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நாலசை

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநாலசை" ):
                listener.enterநாலசை(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநாலசை" ):
                listener.exitநாலசை(self)




    def நாலசை(self):

        localctx = வெண்பாParser.நாலசைContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_நாலசை)
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.தேமாந்தண்பூ()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.தேமாந்தண்ணிழல்()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.தேமாநறும்பூ()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 320
                self.தேமாநறுநிழல்()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 321
                self.புளிமாந்தண்பூ()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 322
                self.புளிமாந்தண்ணிழல்()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 323
                self.புளிமாநறும்பூ()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 324
                self.புளிமாநறுநிழல்()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 325
                self.கருவிளந்தண்பூ()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 326
                self.கருவிளந்தண்ணிழல்()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 327
                self.கருவிளநறும்பூ()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 328
                self.கருவிளநறுநிழல்()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 329
                self.கூவிளந்தண்பூ()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 330
                self.கூவிளந்தண்ணிழல்()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 331
                self.கூவிளநறும்பூ()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 332
                self.கூவிளநறுநிழல்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class மூவசைContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்காய்Context,0)


        def தேமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்கனிContext,0)


        def புளிமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்காய்Context,0)


        def புளிமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்கனிContext,0)


        def கருவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்காய்Context,0)


        def கருவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்கனிContext,0)


        def கூவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்காய்Context,0)


        def கூவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்கனிContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_மூவசை

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterமூவசை" ):
                listener.enterமூவசை(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitமூவசை" ):
                listener.exitமூவசை(self)




    def மூவசை(self):

        localctx = வெண்பாParser.மூவசைContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_மூவசை)
        try:
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.தேமாங்காய்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.தேமாங்கனி()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.புளிமாங்காய்()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 338
                self.புளிமாங்கனி()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 339
                self.கருவிளங்காய்()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 340
                self.கருவிளங்கனி()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 341
                self.கூவிளங்காய்()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 342
                self.கூவிளங்கனி()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ஈரசைContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_ஈரசை

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஈரசை" ):
                listener.enterஈரசை(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஈரசை" ):
                listener.exitஈரசை(self)




    def ஈரசை(self):

        localctx = வெண்பாParser.ஈரசைContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ஈரசை)
        try:
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                self.தேமா()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 346
                self.புளிமா()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 347
                self.கருவிளம்()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 348
                self.கூவிளம்()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாந்தண்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்காய்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாந்தண்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாந்தண்பூ" ):
                listener.enterதேமாந்தண்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாந்தண்பூ" ):
                listener.exitதேமாந்தண்பூ(self)




    def தேமாந்தண்பூ(self):

        localctx = வெண்பாParser.தேமாந்தண்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_தேமாந்தண்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.தேமாங்காய்()
            self.state = 352
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாந்தண்ணிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்காய்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாந்தண்ணிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாந்தண்ணிழல்" ):
                listener.enterதேமாந்தண்ணிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாந்தண்ணிழல்" ):
                listener.exitதேமாந்தண்ணிழல்(self)




    def தேமாந்தண்ணிழல்(self):

        localctx = வெண்பாParser.தேமாந்தண்ணிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_தேமாந்தண்ணிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.தேமாங்காய்()
            self.state = 355
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாநறும்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்கனிContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாநறும்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாநறும்பூ" ):
                listener.enterதேமாநறும்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாநறும்பூ" ):
                listener.exitதேமாநறும்பூ(self)




    def தேமாநறும்பூ(self):

        localctx = வெண்பாParser.தேமாநறும்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_தேமாநறும்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.தேமாங்கனி()
            self.state = 358
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாநறுநிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாங்கனிContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாநறுநிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாநறுநிழல்" ):
                listener.enterதேமாநறுநிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாநறுநிழல்" ):
                listener.exitதேமாநறுநிழல்(self)




    def தேமாநறுநிழல்(self):

        localctx = வெண்பாParser.தேமாநறுநிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_தேமாநறுநிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.தேமாங்கனி()
            self.state = 361
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாந்தண்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்காய்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாந்தண்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாந்தண்பூ" ):
                listener.enterபுளிமாந்தண்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாந்தண்பூ" ):
                listener.exitபுளிமாந்தண்பூ(self)




    def புளிமாந்தண்பூ(self):

        localctx = வெண்பாParser.புளிமாந்தண்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_புளிமாந்தண்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.புளிமாங்காய்()
            self.state = 364
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாந்தண்ணிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமாங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்காய்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாந்தண்ணிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாந்தண்ணிழல்" ):
                listener.enterபுளிமாந்தண்ணிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாந்தண்ணிழல்" ):
                listener.exitபுளிமாந்தண்ணிழல்(self)




    def புளிமாந்தண்ணிழல்(self):

        localctx = வெண்பாParser.புளிமாந்தண்ணிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_புளிமாந்தண்ணிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.புளிமாங்காய்()
            self.state = 367
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாநறும்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்கனிContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாநறும்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாநறும்பூ" ):
                listener.enterபுளிமாநறும்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாநறும்பூ" ):
                listener.exitபுளிமாநறும்பூ(self)




    def புளிமாநறும்பூ(self):

        localctx = வெண்பாParser.புளிமாநறும்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_புளிமாநறும்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.புளிமாங்கனி()
            self.state = 370
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாநறுநிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமாங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாங்கனிContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாநறுநிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாநறுநிழல்" ):
                listener.enterபுளிமாநறுநிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாநறுநிழல்" ):
                listener.exitபுளிமாநறுநிழல்(self)




    def புளிமாநறுநிழல்(self):

        localctx = வெண்பாParser.புளிமாநறுநிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_புளிமாநறுநிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.புளிமாங்கனி()
            self.state = 373
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளந்தண்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்காய்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளந்தண்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளந்தண்பூ" ):
                listener.enterகருவிளந்தண்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளந்தண்பூ" ):
                listener.exitகருவிளந்தண்பூ(self)




    def கருவிளந்தண்பூ(self):

        localctx = வெண்பாParser.கருவிளந்தண்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_கருவிளந்தண்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.கருவிளங்காய்()
            self.state = 376
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளந்தண்ணிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்காய்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளந்தண்ணிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளந்தண்ணிழல்" ):
                listener.enterகருவிளந்தண்ணிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளந்தண்ணிழல்" ):
                listener.exitகருவிளந்தண்ணிழல்(self)




    def கருவிளந்தண்ணிழல்(self):

        localctx = வெண்பாParser.கருவிளந்தண்ணிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_கருவிளந்தண்ணிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.கருவிளங்காய்()
            self.state = 379
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளநறும்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்கனிContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளநறும்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளநறும்பூ" ):
                listener.enterகருவிளநறும்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளநறும்பூ" ):
                listener.exitகருவிளநறும்பூ(self)




    def கருவிளநறும்பூ(self):

        localctx = வெண்பாParser.கருவிளநறும்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_கருவிளநறும்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.கருவிளங்கனி()
            self.state = 382
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளநறுநிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளங்கனிContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளநறுநிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளநறுநிழல்" ):
                listener.enterகருவிளநறுநிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளநறுநிழல்" ):
                listener.exitகருவிளநறுநிழல்(self)




    def கருவிளநறுநிழல்(self):

        localctx = வெண்பாParser.கருவிளநறுநிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_கருவிளநறுநிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.கருவிளங்கனி()
            self.state = 385
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளந்தண்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்காய்Context,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளந்தண்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளந்தண்பூ" ):
                listener.enterகூவிளந்தண்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளந்தண்பூ" ):
                listener.exitகூவிளந்தண்பூ(self)




    def கூவிளந்தண்பூ(self):

        localctx = வெண்பாParser.கூவிளந்தண்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_கூவிளந்தண்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.கூவிளங்காய்()
            self.state = 388
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளந்தண்ணிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளங்காய்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்காய்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளந்தண்ணிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளந்தண்ணிழல்" ):
                listener.enterகூவிளந்தண்ணிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளந்தண்ணிழல்" ):
                listener.exitகூவிளந்தண்ணிழல்(self)




    def கூவிளந்தண்ணிழல்(self):

        localctx = வெண்பாParser.கூவிளந்தண்ணிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_கூவிளந்தண்ணிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.கூவிளங்காய்()
            self.state = 391
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளநறும்பூContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்கனிContext,0)


        def நேர்(self):
            return self.getTypedRuleContext(வெண்பாParser.நேர்Context,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளநறும்பூ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளநறும்பூ" ):
                listener.enterகூவிளநறும்பூ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளநறும்பூ" ):
                listener.exitகூவிளநறும்பூ(self)




    def கூவிளநறும்பூ(self):

        localctx = வெண்பாParser.கூவிளநறும்பூContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_கூவிளநறும்பூ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.கூவிளங்கனி()
            self.state = 394
            self.நேர்()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளநறுநிழல்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளங்கனி(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளங்கனிContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளநறுநிழல்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளநறுநிழல்" ):
                listener.enterகூவிளநறுநிழல்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளநறுநிழல்" ):
                listener.exitகூவிளநறுநிழல்(self)




    def கூவிளநறுநிழல்(self):

        localctx = வெண்பாParser.கூவிளநறுநிழல்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_கூவிளநறுநிழல்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.கூவிளங்கனி()
            self.state = 397
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class தேமாங்கனிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def தேமா(self):
            return self.getTypedRuleContext(வெண்பாParser.தேமாContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_தேமாங்கனி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterதேமாங்கனி" ):
                listener.enterதேமாங்கனி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitதேமாங்கனி" ):
                listener.exitதேமாங்கனி(self)




    def தேமாங்கனி(self):

        localctx = வெண்பாParser.தேமாங்கனிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_தேமாங்கனி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.தேமா()
            self.state = 400
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class புளிமாங்கனிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def புளிமா(self):
            return self.getTypedRuleContext(வெண்பாParser.புளிமாContext,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_புளிமாங்கனி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterபுளிமாங்கனி" ):
                listener.enterபுளிமாங்கனி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitபுளிமாங்கனி" ):
                listener.exitபுளிமாங்கனி(self)




    def புளிமாங்கனி(self):

        localctx = வெண்பாParser.புளிமாங்கனிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_புளிமாங்கனி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.புளிமா()
            self.state = 403
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கருவிளங்கனிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கருவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கருவிளம்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கருவிளங்கனி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகருவிளங்கனி" ):
                listener.enterகருவிளங்கனி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகருவிளங்கனி" ):
                listener.exitகருவிளங்கனி(self)




    def கருவிளங்கனி(self):

        localctx = வெண்பாParser.கருவிளங்கனிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_கருவிளங்கனி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.கருவிளம்()
            self.state = 406
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class கூவிளங்கனிContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def கூவிளம்(self):
            return self.getTypedRuleContext(வெண்பாParser.கூவிளம்Context,0)


        def நிரை(self):
            return self.getTypedRuleContext(வெண்பாParser.நிரைContext,0)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_கூவிளங்கனி

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகூவிளங்கனி" ):
                listener.enterகூவிளங்கனி(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகூவிளங்கனி" ):
                listener.exitகூவிளங்கனி(self)




    def கூவிளங்கனி(self):

        localctx = வெண்பாParser.கூவிளங்கனிContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_கூவிளங்கனி)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.கூவிளம்()
            self.state = 409
            self.நிரை()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நேர்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def குறில்(self):
            return self.getTypedRuleContext(வெண்பாParser.குறில்Context,0)


        def நெடில்(self):
            return self.getTypedRuleContext(வெண்பாParser.நெடில்Context,0)


        def ஆய்தம்(self):
            return self.getTypedRuleContext(வெண்பாParser.ஆய்தம்Context,0)


        def ஒற்று(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.ஒற்றுContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.ஒற்றுContext,i)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நேர்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநேர்" ):
                listener.enterநேர்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநேர்" ):
                listener.exitநேர்(self)




    def நேர்(self):

        localctx = வெண்பாParser.நேர்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_நேர்)
        self._la = 0 # Token type
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.குறில்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.நெடில்()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 413
                self.குறில்()
                self.state = 420
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [248]:
                    self.state = 414
                    self.ஆய்தம்()
                    pass
                elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
                    self.state = 416 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 415
                        self.ஒற்று()
                        self.state = 418 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1048572) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.நெடில்()
                self.state = 429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [248]:
                    self.state = 423
                    self.ஆய்தம்()
                    pass
                elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
                    self.state = 425 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 424
                        self.ஒற்று()
                        self.state = 427 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1048572) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நிரைContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def குறில்(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.குறில்Context)
            else:
                return self.getTypedRuleContext(வெண்பாParser.குறில்Context,i)


        def நெடில்(self):
            return self.getTypedRuleContext(வெண்பாParser.நெடில்Context,0)


        def ஆய்தம்(self):
            return self.getTypedRuleContext(வெண்பாParser.ஆய்தம்Context,0)


        def ஒற்று(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(வெண்பாParser.ஒற்றுContext)
            else:
                return self.getTypedRuleContext(வெண்பாParser.ஒற்றுContext,i)


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நிரை

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநிரை" ):
                listener.enterநிரை(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநிரை" ):
                listener.exitநிரை(self)




    def நிரை(self):

        localctx = வெண்பாParser.நிரைContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_நிரை)
        self._la = 0 # Token type
        try:
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.குறில்()
                self.state = 434
                self.குறில்()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 436
                self.குறில்()
                self.state = 437
                self.நெடில்()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.குறில்()
                self.state = 440
                self.குறில்()
                self.state = 447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [248]:
                    self.state = 441
                    self.ஆய்தம்()
                    pass
                elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
                    self.state = 443 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 442
                        self.ஒற்று()
                        self.state = 445 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1048572) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 449
                self.குறில்()
                self.state = 450
                self.நெடில்()
                self.state = 457
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [248]:
                    self.state = 451
                    self.ஆய்தம்()
                    pass
                elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
                    self.state = 453 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 452
                        self.ஒற்று()
                        self.state = 455 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1048572) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ஒற்றுContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return வெண்பாParser.RULE_ஒற்று

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஒற்று" ):
                listener.enterஒற்று(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஒற்று" ):
                listener.exitஒற்று(self)




    def ஒற்று(self):

        localctx = வெண்பாParser.ஒற்றுContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ஒற்று)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1048572) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class குறில்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return வெண்பாParser.RULE_குறில்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterகுறில்" ):
                listener.enterகுறில்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitகுறில்" ):
                listener.exitகுறில்(self)




    def குறில்(self):

        localctx = வெண்பாParser.குறில்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_குறில்)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1048576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2251799813685247) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class நெடில்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return வெண்பாParser.RULE_நெடில்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterநெடில்" ):
                listener.enterநெடில்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitநெடில்" ):
                listener.exitநெடில்(self)




    def நெடில்(self):

        localctx = வெண்பாParser.நெடில்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_நெடில்)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            _la = self._input.LA(1)
            if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & -1) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & -1) != 0) or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ஆய்தம்Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return வெண்பாParser.RULE_ஆய்தம்

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterஆய்தம்" ):
                listener.enterஆய்தம்(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitஆய்தம்" ):
                listener.exitஆய்தம்(self)




    def ஆய்தம்(self):

        localctx = வெண்பாParser.ஆய்தம்Context(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_ஆய்தம்)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(வெண்பாParser.T__247)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





